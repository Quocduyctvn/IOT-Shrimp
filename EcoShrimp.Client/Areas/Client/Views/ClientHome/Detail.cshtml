@using EcoShrimp.Data.Entities
@model EcoShrimp.Data.Entities.AppConnects
@{
	ViewBag.Title = "Sensor Detail";
	var farm = ViewData["farm"] as AppFarms;
}

<div class="row mt-2">
	<div class="col-12 d-flex flex-column align-items-center text-center">
		<div class="row">
			<h4 class="mx-1" style="font-weight: bold">Trang trại: @farm.FarmName</h4>
		</div>
		<div class="row">
			<div class="col-12 h4 m-0">
				Vuông: @Model.appSeasons.appPond.Name
			</div>
			<div class="col-12 m-0">
				Vụ mùa: @Model.appSeasons?.Name
			</div>
		</div>
	</div>
</div>
<div class="row px-0 mt-4" style="margin: 0 10px">
	<div class="col-6 text-start">
		<span class="d-block">Thiết bị: @Model.appProInstances.Name</span>
	</div>

	<div class="col-6 text-end d-flex align-items-center justify-content-end">
		<span style="padding-right: 10px">Trạng thái kết nối:</span>
		<span id="deviceStatus">
			<span class="text-muted">Đang kiểm tra...</span>
		</span>
	</div>
</div>

<label for="datePicker">Chọn ngày:</label>
<input type="date" id="datePicker">

<button onclick="fetchSensorData()">Lấy dữ liệu</button>


<div class="chart-container mt-4">	
	<canvas id="phChart" style="width: 550px; height: 350px;"></canvas>
	<canvas id="temperatureChart" style="width: 550px; height: 350px;"></canvas>
	<canvas id="doChart" style="width: 550px; height: 350px;"></canvas>
	<canvas id="nh4Chart" style="width: 550px; height: 350px;"></canvas>
	<canvas id="salChart" style="width: 550px; height: 350px;"></canvas>
	<canvas id="turChart" style="width: 550px; height: 350px;"></canvas>
</div>


<div class="row" style="margin-top: 20px">
	<div class="form-group">
		<partial name="_BackToList" />
	</div>
</div>

<!-- Thêm các thư viện JavaScript -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> <!-- Đảm bảo jQuery được tải đúng -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script> <!-- Thêm Chart.js -->
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script> <!-- Thêm jQuery UI cho Autocomplete -->
<script src="https://unpkg.com/masonry-layout@4.2.2/dist/masonry.pkgd.min.js"></script> <!-- Thêm thư viện Masonry -->

<script>

	var idConnect = @Model.Id;  // Lấy IdConnect từ Controller truyền sang View

	let lastUpdateTime = null;

		// Gọi API ngay khi trang load xong
	document.addEventListener("DOMContentLoaded", function () {
		fetchSensorData();  // Gọi API ngay lập tức khi trang tải xong
		setInterval(updateCharts, 1000); // Kiểm tra mỗi giây
	});

	function updateCharts() {
		let currentTime = new Date();

		let roundedTime = new Date(currentTime);
		roundedTime.setSeconds(0, 0); // Đặt giây và mili giây về 0

		// Kiểm tra nếu giây là 0 (đầu mỗi phút)
		if (currentTime.getSeconds() === 0 || currentTime.getSeconds() === 3) {
			// Nếu đã cập nhật dữ liệu cho phút này rồi, không cập nhật lại
			if (lastUpdateTime &&
				roundedTime.getHours() === lastUpdateTime.getHours() &&
				roundedTime.getMinutes() === lastUpdateTime.getMinutes()) {
				console.log("Chỉ cập nhật một lần mỗi phút.");
				return;
			}

			// Cập nhật thời gian đã cập nhật
			lastUpdateTime = roundedTime;

			// Gọi API cập nhật dữ liệu

			console.log("Cập nhật biểu đồ tại:", currentTime.toLocaleTimeString());
			fetchSensorData();
		}

			let deviceId = @Model.appProInstances.Id;
			checkConnection(deviceId);
	}


	function fetchSensorData() {
		let now = new Date();
		let datePicker = document.getElementById("datePicker").value; // Lấy ngày từ input
		let selectedDate = datePicker ? new Date(datePicker) : now;

		// Lấy ngày hiện tại (YYYY-MM-DD)
		let today = now.toISOString().split("T")[0];
		let selectedDay = selectedDate.toISOString().split("T")[0];

		let endDate;

			console.log("Date 1:", today);
			console.log("Date 1:", selectedDay);
			console.log("Date 1:", now);
			console.log("Date 1:", selectedDate);
		if (selectedDay === now) {
			endDate = now; // Nếu là hôm nay, giữ nguyên `now`
			//console.log("Date 1:", endDate);
		} else {
			let endOfDay = new Date(selectedDate);
			endOfDay.setHours(23, 59, 59, 999); // Đặt giờ thành cuối ngày

			endDate = endOfDay; // Gán `endOfDay` vào `endDate`
			//console.log("Date 2:", endDate);
		}

		// ✅ Định dạng `endDate` giống `now`
		let formattedEndDate = formatDate(endDate);

		console.log("Start Date:", selectedDay);
		console.log("End Date:", formattedEndDate);
		console.log("Date:", formatDate(now));

		function formatDate(date) {
			return date.toString(); // Giữ định dạng giống `now`
		}


		$.ajax({
			url: '@Url.Action("GetSensorData", "ClientHome")',
			type: 'GET',
			data: { idConnect: idConnect, dateSelected: selectedDay },
			success: function (data) {
				if (data.error) {
					console.log("Lỗi từ API:", data.error);
				} else {
					console.log("Dữ liệu từ API:", data);

					// Xử lý dữ liệu thiếu
					let sensorData = fillMissingData(data, endDate);
					console.log("Dữ liệu sau khi xử lý:", sensorData);

					// Sắp xếp dữ liệu theo thời gian
					sensorData.sort((a, b) => new Date(a.createdDate || a.CreatedDate) - new Date(b.createdDate || b.CreatedDate));

					// Cập nhật biểu đồ
					updatePHChart(sensorData.map(d => ({ time: new Date(d.createdDate || d.CreatedDate), value: d.ph })));
					updateTemperatureChart(sensorData.map(d => ({ time: new Date(d.createdDate || d.CreatedDate), value: d.temp })));
					updateDOChart(sensorData.map(d => ({ time: new Date(d.createdDate || d.CreatedDate), value: d.do })));
					updateNH4Chart(sensorData.map(d => ({ time: new Date(d.createdDate || d.CreatedDate), value: d.nh4 })));
					updateSalChart(sensorData.map(d => ({ time: new Date(d.createdDate || d.CreatedDate), value: d.sal })));
					updateTurChart(sensorData.map(d => ({ time: new Date(d.createdDate || d.CreatedDate), value: d.tur })));
				}
			},
			error: function (error) {
				console.log("Lỗi khi gọi API:", error);
			}
		});
	}

	// Mặc định chọn ngày hôm nay
	document.addEventListener("DOMContentLoaded", function() {
		let today = new Date().toISOString().split("T")[0];
		document.getElementById("datePicker").value = today;
	});




	// Hàm điền dữ liệu thiếu mốc thời gian (sử dụng thời gian hiện tại để điền)
	function fillMissingData(data, currentTime) {
		let expectedTimes = generateExpectedTimes(currentTime);
		let filledData = [];

		expectedTimes.forEach(time => {
			let dataAtTime = data.find(d => {
				let createdTime = new Date(d.createdDate || d.CreatedDate);
				createdTime.setSeconds(0, 0); // Đặt giây và mili giây về 0
				return createdTime.getHours() === time.getHours() && createdTime.getMinutes() === time.getMinutes();
			});

			if (dataAtTime) {
				filledData.push(dataAtTime);
			} else {
				filledData.push({
					createdDate: time,
					ph: null,
					temp: null,
					do: null,
					nh4: null,
					sal: null,
					tur: null
				});
			}
		});

		return filledData;
	}

	function generateExpectedTimes(currentTime) {
		let times = [];
		let startTime = new Date(currentTime);
		startTime.setHours(0, 0, 0, 0); // Đặt về 00:00:00

		while (startTime <= currentTime) {
			times.push(new Date(startTime));
			startTime.setMinutes(startTime.getMinutes() + 1); // Cộng thêm 30 phút
		}

		return times;
	}



	function limitChartData(chart) {
		if (chart.data.labels.length > 15) {
			chart.data.labels.shift();  // Xóa label cũ
			chart.data.datasets[0].data.shift();  // Xóa dữ liệu cũ
		}
	}

	// Cập nhật biểu đồ pH
	function updatePHChart(sensorData) {
		let labels = sensorData.map(d => d.time.toLocaleTimeString());
		let values = sensorData.map(d => d.value);

		// Cập nhật dữ liệu biểu đồ
		phChart.data.labels = labels;
		phChart.data.datasets[0].data = values;

		// Giới hạn số lượng điểm dữ liệu và cập nhật biểu đồ
		limitChartData(phChart);
		phChart.update();
	}


	// Cập nhật biểu đồ Nhiệt độ
	function updateTemperatureChart(temperature) {
		let labels = temperature.map(d => d.time.toLocaleTimeString());
		let values = temperature.map(d => d.value);

		// Cập nhật dữ liệu biểu đồ
		temperatureChart.data.labels = labels;
		temperatureChart.data.datasets[0].data = values;

		// Giới hạn số lượng điểm dữ liệu và cập nhật biểu đồ
		limitChartData(temperatureChart);
		temperatureChart.update();
	}

	// Cập nhật biểu đồ DO
	function updateDOChart(dissolvedOxygen) {
		let labels = dissolvedOxygen.map(d => d.time.toLocaleTimeString());
		let values = dissolvedOxygen.map(d => d.value);

		// Cập nhật dữ liệu biểu đồ
		doChart.data.labels = labels;
		doChart.data.datasets[0].data = values;

		// Giới hạn số lượng điểm dữ liệu và cập nhật biểu đồ
		limitChartData(doChart);
		doChart.update();
	}

	// Cập nhật biểu đồ NH4
	function updateNH4Chart(ammonium) {
		let labels = ammonium.map(d => d.time.toLocaleTimeString());
		let values = ammonium.map(d => d.value);

		// Cập nhật dữ liệu biểu đồ
		nh4Chart.data.labels = labels;
		nh4Chart.data.datasets[0].data = values;

		// Giới hạn số lượng điểm dữ liệu và cập nhật biểu đồ
		limitChartData(nh4Chart);
		nh4Chart.update();
	}

	// Cập nhật biểu đồ Sal
	function updateSalChart(salinity) {
		let labels = salinity.map(d => d.time.toLocaleTimeString());
		let values = salinity.map(d => d.value);

		// Cập nhật dữ liệu biểu đồ
		salChart.data.labels = labels;
		salChart.data.datasets[0].data = values;

		// Giới hạn số lượng điểm dữ liệu và cập nhật biểu đồ
		limitChartData(salChart);
		salChart.update();
	}

	// Cập nhật biểu đồ Tur
	function updateTurChart(turbidity) {
		let labels = turbidity.map(d => d.time.toLocaleTimeString());
		let values = turbidity.map(d => d.value);

		// Cập nhật dữ liệu biểu đồ
		turChart.data.labels = labels;
		turChart.data.datasets[0].data = values;

		// Giới hạn số lượng điểm dữ liệu và cập nhật biểu đồ
		limitChartData(turChart);
		turChart.update();
	}


	// Khởi tạo các biểu đồ
	var phChart = new Chart(document.getElementById('phChart'), {
		type: 'line',
		data: {
			labels: [],  // Mốc thời gian hoặc các giá trị mốc
			datasets: [{
				label: 'pH',
				data: [],  // Giá trị pH
				borderColor: 'rgba(75, 192, 192, 1)',
				fill: false
			}]
		},
		options: {
			responsive: false,
			maintainAspectRatio: false,
			options: {
				responsive: true, // Biểu đồ sẽ đáp ứng theo kích thước màn hình
				maintainAspectRatio: false,
				plugins: {
					legend: {
						display: true  // Hiển thị chú giải cho biểu đồ
					}
				}
			}
		}
	});


	var temperatureChart = new Chart(document.getElementById('temperatureChart'), {
		type: 'line',
		data: {
			labels: [],  // Mốc thời gian hoặc các giá trị mốc
			datasets: [{
				label: 'Nhiệt độ',
				data: [],  // Giá trị nhiệt độ
				borderColor: 'rgba(75, 192, 192, 1)',
				fill: false
			}]
		},
		options: {
			responsive: false,
			maintainAspectRatio: false,
			plugins: { legend: { display: true } }
		}
	});

	var doChart = new Chart(document.getElementById('doChart'), {
		type: 'line',
		data: {
			labels: [],  // Mốc thời gian hoặc các giá trị mốc
			datasets: [{
				label: 'Oxy hòa tan',
				data: [],  // Giá trị DO
				borderColor: 'rgba(255, 99, 132, 1)',
				fill: false
			}]
		},
		options: {
			responsive: false,
			maintainAspectRatio: false,
			plugins: { legend: { display: true } }
		}
	});

	var nh4Chart = new Chart(document.getElementById('nh4Chart'), {
		type: 'line',
		data: {
			labels: [],  // Mốc thời gian hoặc các giá trị mốc
			datasets: [{
				label: 'Nồng độ NH4',
				data: [],  // Giá trị NH4
				backgroundColor: 'rgba(153, 102, 255, 1)'
			}]
		},
		options: {
			responsive: false,
			maintainAspectRatio: false,
			plugins: { legend: { display: true } }
		}
	});

	var salChart = new Chart(document.getElementById('salChart'), {
		type: 'line',
		data: {
			labels: [],  // Mốc thời gian hoặc các giá trị mốc
			datasets: [{
				label: 'Độ mặn',
				data: [],  // Giá trị độ mặn
				borderColor: 'rgba(54, 162, 235, 1)',
				fill: false
			}]
		},
		options: {
			responsive: false,
			maintainAspectRatio: false,
			plugins: { legend: { display: true } }
		}
	});

	var turChart = new Chart(document.getElementById('turChart'), {
		type: 'line',
		data: {
			labels: [],  // Mốc thời gian hoặc các giá trị mốc
			datasets: [{
				label: 'Độ đục',
				data: [],  // Giá trị độ đục
				borderColor: 'rgba(255, 159, 64, 1)',
				fill: false
			}]
		},
		options: {
			responsive: false,
			maintainAspectRatio: false,
			plugins: { legend: { display: true } }
		}
	});


	async function checkConnection(deviceId) {
		try {
			let response = await fetch(`/Client/ClientHome/GetConnect/${deviceId}`);
			let data = await response.json();

			let statusElement = document.getElementById("deviceStatus");
			// console.log("data connect: " + JSON.stringify(data, null, 2));

			if (data.isOnline) {
				console.log("online");
				statusElement.innerHTML = ` <span class="d-block">
												<i class="far fa-check-circle me-1 text-success"></i> Đang hoạt động
											</span>`;
			} else {
				console.log("not-online");
				statusElement.innerHTML = ` <span class="d-block text-danger"">
												<i class="fas fa-times-circle"></i> Thiết bị không kết nối Wi-Fi
											</span>`;
			}
		} catch (error) {
			console.error("Lỗi kết nối:", error);
			document.getElementById("deviceStatus").innerHTML =
				`<span class="text-danger"><i class="fas fa-times-circle"></i> Lỗi kiểm tra kết nối</span>`;
		}
	}


</script>